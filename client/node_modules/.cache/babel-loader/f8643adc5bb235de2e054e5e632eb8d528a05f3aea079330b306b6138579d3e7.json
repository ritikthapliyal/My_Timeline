{"ast":null,"code":"'use strict';\n\nconst monthNamesConversion = require('./month-names-conversion');\nconst weekDayNamesConversion = require('./week-day-names-conversion');\nconst convertAsterisksToRanges = require('./asterisk-to-range-conversion');\nconst convertRanges = require('./range-conversion');\nconst convertSteps = require('./step-values-conversion');\nmodule.exports = (() => {\n  function appendSeccondExpression(expressions) {\n    if (expressions.length === 5) {\n      return ['0'].concat(expressions);\n    }\n    return expressions;\n  }\n  function removeSpaces(str) {\n    return str.replace(/\\s{2,}/g, ' ').trim();\n  }\n\n  // Function that takes care of normalization.\n  function normalizeIntegers(expressions) {\n    for (let i = 0; i < expressions.length; i++) {\n      const numbers = expressions[i].split(',');\n      for (let j = 0; j < numbers.length; j++) {\n        numbers[j] = parseInt(numbers[j]);\n      }\n      expressions[i] = numbers;\n    }\n    return expressions;\n  }\n\n  /*\n  * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n  * This module is going to translate the month names, week day names and ranges\n  * to integers relatives.\n  *\n  * Month names example:\n  *  - expression 0 1 1 January,Sep *\n  *  - Will be translated to 0 1 1 1,9 *\n  *\n  * Week day names example:\n  *  - expression 0 1 1 2 Monday,Sat\n  *  - Will be translated to 0 1 1 1,5 *\n  *\n  * Ranges example:\n  *  - expression 1-5 * * * *\n  *  - Will be translated to 1,2,3,4,5 * * * *\n  */\n  function interprete(expression) {\n    let expressions = removeSpaces(expression).split(' ');\n    expressions = appendSeccondExpression(expressions);\n    expressions[4] = monthNamesConversion(expressions[4]);\n    expressions[5] = weekDayNamesConversion(expressions[5]);\n    expressions = convertAsterisksToRanges(expressions);\n    expressions = convertRanges(expressions);\n    expressions = convertSteps(expressions);\n    expressions = normalizeIntegers(expressions);\n    return expressions.join(' ');\n  }\n  return interprete;\n})();","map":{"version":3,"names":["monthNamesConversion","require","weekDayNamesConversion","convertAsterisksToRanges","convertRanges","convertSteps","module","exports","appendSeccondExpression","expressions","length","concat","removeSpaces","str","replace","trim","normalizeIntegers","i","numbers","split","j","parseInt","interprete","expression","join"],"sources":["C:/Users/ritik/OneDrive/Desktop/React/nnnn/My_Timeline/client/node_modules/node-cron/src/convert-expression/index.js"],"sourcesContent":["'use strict';\n\nconst monthNamesConversion = require('./month-names-conversion');\nconst weekDayNamesConversion = require('./week-day-names-conversion');\nconst convertAsterisksToRanges = require('./asterisk-to-range-conversion');\nconst convertRanges = require('./range-conversion');\nconst convertSteps = require('./step-values-conversion');\n\nmodule.exports = (() => {\n\n    function appendSeccondExpression(expressions){\n        if(expressions.length === 5){\n            return ['0'].concat(expressions);\n        }\n        return expressions;\n    }\n\n    function removeSpaces(str) {\n        return str.replace(/\\s{2,}/g, ' ').trim();\n    }\n\n    // Function that takes care of normalization.\n    function normalizeIntegers(expressions) {\n        for (let i=0; i < expressions.length; i++){\n            const numbers = expressions[i].split(',');\n            for (let j=0; j<numbers.length; j++){\n                numbers[j] = parseInt(numbers[j]);\n            }\n            expressions[i] = numbers;\n        }\n        return expressions;\n    }\n\n    /*\n   * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n   * This module is going to translate the month names, week day names and ranges\n   * to integers relatives.\n   *\n   * Month names example:\n   *  - expression 0 1 1 January,Sep *\n   *  - Will be translated to 0 1 1 1,9 *\n   *\n   * Week day names example:\n   *  - expression 0 1 1 2 Monday,Sat\n   *  - Will be translated to 0 1 1 1,5 *\n   *\n   * Ranges example:\n   *  - expression 1-5 * * * *\n   *  - Will be translated to 1,2,3,4,5 * * * *\n   */\n    function interprete(expression){\n        let expressions = removeSpaces(expression).split(' ');\n        expressions = appendSeccondExpression(expressions);\n        expressions[4] = monthNamesConversion(expressions[4]);\n        expressions[5] = weekDayNamesConversion(expressions[5]);\n        expressions = convertAsterisksToRanges(expressions);\n        expressions = convertRanges(expressions);\n        expressions = convertSteps(expressions);\n\n        expressions = normalizeIntegers(expressions);\n\n        return expressions.join(' ');\n    }\n\n    return interprete;\n})();\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAChE,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACrE,MAAME,wBAAwB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAC1E,MAAMG,aAAa,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACnD,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAExDK,MAAM,CAACC,OAAO,GAAG,CAAC,MAAM;EAEpB,SAASC,uBAAuB,CAACC,WAAW,EAAC;IACzC,IAAGA,WAAW,CAACC,MAAM,KAAK,CAAC,EAAC;MACxB,OAAO,CAAC,GAAG,CAAC,CAACC,MAAM,CAACF,WAAW,CAAC;IACpC;IACA,OAAOA,WAAW;EACtB;EAEA,SAASG,YAAY,CAACC,GAAG,EAAE;IACvB,OAAOA,GAAG,CAACC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;EAC7C;;EAEA;EACA,SAASC,iBAAiB,CAACP,WAAW,EAAE;IACpC,KAAK,IAAIQ,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGR,WAAW,CAACC,MAAM,EAAEO,CAAC,EAAE,EAAC;MACtC,MAAMC,OAAO,GAAGT,WAAW,CAACQ,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC;MACzC,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACF,OAAO,CAACR,MAAM,EAAEU,CAAC,EAAE,EAAC;QAChCF,OAAO,CAACE,CAAC,CAAC,GAAGC,QAAQ,CAACH,OAAO,CAACE,CAAC,CAAC,CAAC;MACrC;MACAX,WAAW,CAACQ,CAAC,CAAC,GAAGC,OAAO;IAC5B;IACA,OAAOT,WAAW;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASa,UAAU,CAACC,UAAU,EAAC;IAC3B,IAAId,WAAW,GAAGG,YAAY,CAACW,UAAU,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC;IACrDV,WAAW,GAAGD,uBAAuB,CAACC,WAAW,CAAC;IAClDA,WAAW,CAAC,CAAC,CAAC,GAAGT,oBAAoB,CAACS,WAAW,CAAC,CAAC,CAAC,CAAC;IACrDA,WAAW,CAAC,CAAC,CAAC,GAAGP,sBAAsB,CAACO,WAAW,CAAC,CAAC,CAAC,CAAC;IACvDA,WAAW,GAAGN,wBAAwB,CAACM,WAAW,CAAC;IACnDA,WAAW,GAAGL,aAAa,CAACK,WAAW,CAAC;IACxCA,WAAW,GAAGJ,YAAY,CAACI,WAAW,CAAC;IAEvCA,WAAW,GAAGO,iBAAiB,CAACP,WAAW,CAAC;IAE5C,OAAOA,WAAW,CAACe,IAAI,CAAC,GAAG,CAAC;EAChC;EAEA,OAAOF,UAAU;AACrB,CAAC,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}