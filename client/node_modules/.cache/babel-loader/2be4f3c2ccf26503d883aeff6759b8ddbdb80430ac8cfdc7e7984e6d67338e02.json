{"ast":null,"code":"'use strict';\n\nmodule.exports = (() => {\n  function replaceWithRange(expression, text, init, end) {\n    const numbers = [];\n    let last = parseInt(end);\n    let first = parseInt(init);\n    if (first > last) {\n      last = parseInt(init);\n      first = parseInt(end);\n    }\n    for (let i = first; i <= last; i++) {\n      numbers.push(i);\n    }\n    return expression.replace(new RegExp(text, 'i'), numbers.join());\n  }\n  function convertRange(expression) {\n    const rangeRegEx = /(\\d+)-(\\d+)/;\n    let match = rangeRegEx.exec(expression);\n    while (match !== null && match.length > 0) {\n      expression = replaceWithRange(expression, match[0], match[1], match[2]);\n      match = rangeRegEx.exec(expression);\n    }\n    return expression;\n  }\n  function convertAllRanges(expressions) {\n    for (let i = 0; i < expressions.length; i++) {\n      expressions[i] = convertRange(expressions[i]);\n    }\n    return expressions;\n  }\n  return convertAllRanges;\n})();","map":{"version":3,"names":["module","exports","replaceWithRange","expression","text","init","end","numbers","last","parseInt","first","i","push","replace","RegExp","join","convertRange","rangeRegEx","match","exec","length","convertAllRanges","expressions"],"sources":["C:/Users/ritik/OneDrive/Desktop/React/nnnn/My_Timeline/client/node_modules/node-cron/src/convert-expression/range-conversion.js"],"sourcesContent":["'use strict';\nmodule.exports = ( () => {\n    function replaceWithRange(expression, text, init, end) {\n\n        const numbers = [];\n        let last = parseInt(end);\n        let first = parseInt(init);\n\n        if(first > last){\n            last = parseInt(init);\n            first = parseInt(end);\n        }\n\n        for(let i = first; i <= last; i++) {\n            numbers.push(i);\n        }\n\n        return expression.replace(new RegExp(text, 'i'), numbers.join());\n    }\n\n    function convertRange(expression){\n        const rangeRegEx = /(\\d+)-(\\d+)/;\n        let match = rangeRegEx.exec(expression);\n        while(match !== null && match.length > 0){\n            expression = replaceWithRange(expression, match[0], match[1], match[2]);\n            match = rangeRegEx.exec(expression);\n        }\n        return expression;\n    }\n\n    function convertAllRanges(expressions){\n        for(let i = 0; i < expressions.length; i++){\n            expressions[i] = convertRange(expressions[i]);\n        }\n        return expressions;\n    }\n\n    return convertAllRanges;\n})();\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAG,CAAE,MAAM;EACrB,SAASC,gBAAgB,CAACC,UAAU,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAEnD,MAAMC,OAAO,GAAG,EAAE;IAClB,IAAIC,IAAI,GAAGC,QAAQ,CAACH,GAAG,CAAC;IACxB,IAAII,KAAK,GAAGD,QAAQ,CAACJ,IAAI,CAAC;IAE1B,IAAGK,KAAK,GAAGF,IAAI,EAAC;MACZA,IAAI,GAAGC,QAAQ,CAACJ,IAAI,CAAC;MACrBK,KAAK,GAAGD,QAAQ,CAACH,GAAG,CAAC;IACzB;IAEA,KAAI,IAAIK,CAAC,GAAGD,KAAK,EAAEC,CAAC,IAAIH,IAAI,EAAEG,CAAC,EAAE,EAAE;MAC/BJ,OAAO,CAACK,IAAI,CAACD,CAAC,CAAC;IACnB;IAEA,OAAOR,UAAU,CAACU,OAAO,CAAC,IAAIC,MAAM,CAACV,IAAI,EAAE,GAAG,CAAC,EAAEG,OAAO,CAACQ,IAAI,EAAE,CAAC;EACpE;EAEA,SAASC,YAAY,CAACb,UAAU,EAAC;IAC7B,MAAMc,UAAU,GAAG,aAAa;IAChC,IAAIC,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAChB,UAAU,CAAC;IACvC,OAAMe,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAC;MACrCjB,UAAU,GAAGD,gBAAgB,CAACC,UAAU,EAAEe,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;MACvEA,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAChB,UAAU,CAAC;IACvC;IACA,OAAOA,UAAU;EACrB;EAEA,SAASkB,gBAAgB,CAACC,WAAW,EAAC;IAClC,KAAI,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,WAAW,CAACF,MAAM,EAAET,CAAC,EAAE,EAAC;MACvCW,WAAW,CAACX,CAAC,CAAC,GAAGK,YAAY,CAACM,WAAW,CAACX,CAAC,CAAC,CAAC;IACjD;IACA,OAAOW,WAAW;EACtB;EAEA,OAAOD,gBAAgB;AAC3B,CAAC,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}