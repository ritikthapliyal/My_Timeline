{"ast":null,"code":"'use strict';\n\nconst convertExpression = require('./convert-expression');\nconst validationRegex = /^(?:\\d+|\\*|\\*\\/\\d+)$/;\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @param {number} min The minimum value.\n * @param {number} max The maximum value.\n * @returns {boolean}\n */\nfunction isValidExpression(expression, min, max) {\n  const options = expression.split(',');\n  for (const option of options) {\n    const optionAsInt = parseInt(option, 10);\n    if (!Number.isNaN(optionAsInt) && (optionAsInt < min || optionAsInt > max) || !validationRegex.test(option)) return false;\n  }\n  return true;\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidSecond(expression) {\n  return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMinute(expression) {\n  return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidHour(expression) {\n  return !isValidExpression(expression, 0, 23);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidDayOfMonth(expression) {\n  return !isValidExpression(expression, 1, 31);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMonth(expression) {\n  return !isValidExpression(expression, 1, 12);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidWeekDay(expression) {\n  return !isValidExpression(expression, 0, 7);\n}\n\n/**\n * @param {string[]} patterns The Cron-Job expression patterns.\n * @param {string[]} executablePatterns The executable Cron-Job expression\n * patterns.\n * @returns {void}\n */\nfunction validateFields(patterns, executablePatterns) {\n  if (isInvalidSecond(executablePatterns[0])) throw new Error(`${patterns[0]} is a invalid expression for second`);\n  if (isInvalidMinute(executablePatterns[1])) throw new Error(`${patterns[1]} is a invalid expression for minute`);\n  if (isInvalidHour(executablePatterns[2])) throw new Error(`${patterns[2]} is a invalid expression for hour`);\n  if (isInvalidDayOfMonth(executablePatterns[3])) throw new Error(`${patterns[3]} is a invalid expression for day of month`);\n  if (isInvalidMonth(executablePatterns[4])) throw new Error(`${patterns[4]} is a invalid expression for month`);\n  if (isInvalidWeekDay(executablePatterns[5])) throw new Error(`${patterns[5]} is a invalid expression for week day`);\n}\n\n/**\n * Validates a Cron-Job expression pattern.\n *\n * @param {string} pattern The Cron-Job expression pattern.\n * @returns {void}\n */\nfunction validate(pattern) {\n  if (typeof pattern !== 'string') throw new TypeError('pattern must be a string!');\n  const patterns = pattern.split(' ');\n  const executablePatterns = convertExpression(pattern).split(' ');\n  if (patterns.length === 5) patterns.unshift('0');\n  validateFields(patterns, executablePatterns);\n}\nmodule.exports = validate;","map":{"version":3,"names":["convertExpression","require","validationRegex","isValidExpression","expression","min","max","options","split","option","optionAsInt","parseInt","Number","isNaN","test","isInvalidSecond","isInvalidMinute","isInvalidHour","isInvalidDayOfMonth","isInvalidMonth","isInvalidWeekDay","validateFields","patterns","executablePatterns","Error","validate","pattern","TypeError","length","unshift","module","exports"],"sources":["C:/Users/ritik/OneDrive/Desktop/React/nnnn/My_Timeline/client/node_modules/node-cron/src/pattern-validation.js"],"sourcesContent":["'use strict';\n\nconst convertExpression = require('./convert-expression');\n\nconst validationRegex = /^(?:\\d+|\\*|\\*\\/\\d+)$/;\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @param {number} min The minimum value.\n * @param {number} max The maximum value.\n * @returns {boolean}\n */\nfunction isValidExpression(expression, min, max) {\n    const options = expression.split(',');\n\n    for (const option of options) {\n        const optionAsInt = parseInt(option, 10);\n\n        if (\n            (!Number.isNaN(optionAsInt) &&\n                (optionAsInt < min || optionAsInt > max)) ||\n            !validationRegex.test(option)\n        )\n            return false;\n    }\n\n    return true;\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidSecond(expression) {\n    return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMinute(expression) {\n    return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidHour(expression) {\n    return !isValidExpression(expression, 0, 23);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidDayOfMonth(expression) {\n    return !isValidExpression(expression, 1, 31);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMonth(expression) {\n    return !isValidExpression(expression, 1, 12);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidWeekDay(expression) {\n    return !isValidExpression(expression, 0, 7);\n}\n\n/**\n * @param {string[]} patterns The Cron-Job expression patterns.\n * @param {string[]} executablePatterns The executable Cron-Job expression\n * patterns.\n * @returns {void}\n */\nfunction validateFields(patterns, executablePatterns) {\n    if (isInvalidSecond(executablePatterns[0]))\n        throw new Error(`${patterns[0]} is a invalid expression for second`);\n\n    if (isInvalidMinute(executablePatterns[1]))\n        throw new Error(`${patterns[1]} is a invalid expression for minute`);\n\n    if (isInvalidHour(executablePatterns[2]))\n        throw new Error(`${patterns[2]} is a invalid expression for hour`);\n\n    if (isInvalidDayOfMonth(executablePatterns[3]))\n        throw new Error(\n            `${patterns[3]} is a invalid expression for day of month`\n        );\n\n    if (isInvalidMonth(executablePatterns[4]))\n        throw new Error(`${patterns[4]} is a invalid expression for month`);\n\n    if (isInvalidWeekDay(executablePatterns[5]))\n        throw new Error(`${patterns[5]} is a invalid expression for week day`);\n}\n\n/**\n * Validates a Cron-Job expression pattern.\n *\n * @param {string} pattern The Cron-Job expression pattern.\n * @returns {void}\n */\nfunction validate(pattern) {\n    if (typeof pattern !== 'string')\n        throw new TypeError('pattern must be a string!');\n\n    const patterns = pattern.split(' ');\n    const executablePatterns = convertExpression(pattern).split(' ');\n\n    if (patterns.length === 5) patterns.unshift('0');\n\n    validateFields(patterns, executablePatterns);\n}\n\nmodule.exports = validate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}