{"ast":null,"code":"const EventEmitter = require('events');\nconst path = require('path');\nconst {\n  fork\n} = require('child_process');\nconst uuid = require('uuid');\nconst daemonPath = `${__dirname}/daemon.js`;\nclass BackgroundScheduledTask extends EventEmitter {\n  constructor(cronExpression, taskPath, options) {\n    super();\n    if (!options) {\n      options = {\n        scheduled: true,\n        recoverMissedExecutions: false\n      };\n    }\n    this.cronExpression = cronExpression;\n    this.taskPath = taskPath;\n    this.options = options;\n    this.options.name = this.options.name || uuid.v4();\n    if (options.scheduled) {\n      this.start();\n    }\n  }\n  start() {\n    this.stop();\n    this.forkProcess = fork(daemonPath);\n    this.forkProcess.on('message', message => {\n      switch (message.type) {\n        case 'task-done':\n          this.emit('task-done', message.result);\n          break;\n      }\n    });\n    let options = this.options;\n    options.scheduled = true;\n    this.forkProcess.send({\n      type: 'register',\n      path: path.resolve(this.taskPath),\n      cron: this.cronExpression,\n      options: options\n    });\n  }\n  stop() {\n    if (this.forkProcess) {\n      this.forkProcess.kill();\n    }\n  }\n  pid() {\n    if (this.forkProcess) {\n      return this.forkProcess.pid;\n    }\n  }\n  isRunning() {\n    return !this.forkProcess.killed;\n  }\n}\nmodule.exports = BackgroundScheduledTask;","map":{"version":3,"names":["EventEmitter","require","path","fork","uuid","daemonPath","__dirname","BackgroundScheduledTask","constructor","cronExpression","taskPath","options","scheduled","recoverMissedExecutions","name","v4","start","stop","forkProcess","on","message","type","emit","result","send","resolve","cron","kill","pid","isRunning","killed","module","exports"],"sources":["C:/Users/ritik/OneDrive/Desktop/React/nnnn/My_Timeline/client/node_modules/node-cron/src/background-scheduled-task/index.js"],"sourcesContent":["const EventEmitter = require('events');\nconst path = require('path');\nconst { fork } = require('child_process');\nconst uuid = require('uuid');\n\nconst daemonPath = `${__dirname}/daemon.js`;\n\nclass BackgroundScheduledTask extends EventEmitter {\n    constructor(cronExpression, taskPath, options){\n        super();\n        if(!options){\n            options = {\n                scheduled: true,\n                recoverMissedExecutions: false,\n            };\n        }\n        this.cronExpression = cronExpression;\n        this.taskPath = taskPath;\n        this.options = options;\n        this.options.name = this.options.name || uuid.v4();\n\n        if(options.scheduled){\n            this.start();\n        }\n    }\n\n    start() {\n        this.stop();\n        this.forkProcess = fork(daemonPath);\n\n        this.forkProcess.on('message', (message) => {\n            switch(message.type){\n            case 'task-done':\n                this.emit('task-done', message.result);\n                break;\n            }\n        });\n\n        let options = this.options;\n        options.scheduled = true;\n        \n        this.forkProcess.send({\n            type: 'register',\n            path: path.resolve(this.taskPath),\n            cron: this.cronExpression,\n            options: options\n        });\n    }\n    \n    stop(){\n        if(this.forkProcess){\n            this.forkProcess.kill();\n        }\n    }\n\n    pid() {\n        if(this.forkProcess){\n            return this.forkProcess.pid;\n        }\n    }\n\n    isRunning(){\n        return !this.forkProcess.killed;\n    }\n}\n\nmodule.exports = BackgroundScheduledTask;"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAK,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AACzC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,UAAU,GAAI,GAAEC,SAAU,YAAW;AAE3C,MAAMC,uBAAuB,SAASP,YAAY,CAAC;EAC/CQ,WAAW,CAACC,cAAc,EAAEC,QAAQ,EAAEC,OAAO,EAAC;IAC1C,KAAK,EAAE;IACP,IAAG,CAACA,OAAO,EAAC;MACRA,OAAO,GAAG;QACNC,SAAS,EAAE,IAAI;QACfC,uBAAuB,EAAE;MAC7B,CAAC;IACL;IACA,IAAI,CAACJ,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACA,OAAO,CAACG,IAAI,GAAG,IAAI,CAACH,OAAO,CAACG,IAAI,IAAIV,IAAI,CAACW,EAAE,EAAE;IAElD,IAAGJ,OAAO,CAACC,SAAS,EAAC;MACjB,IAAI,CAACI,KAAK,EAAE;IAChB;EACJ;EAEAA,KAAK,GAAG;IACJ,IAAI,CAACC,IAAI,EAAE;IACX,IAAI,CAACC,WAAW,GAAGf,IAAI,CAACE,UAAU,CAAC;IAEnC,IAAI,CAACa,WAAW,CAACC,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;MACxC,QAAOA,OAAO,CAACC,IAAI;QACnB,KAAK,WAAW;UACZ,IAAI,CAACC,IAAI,CAAC,WAAW,EAAEF,OAAO,CAACG,MAAM,CAAC;UACtC;MAAM;IAEd,CAAC,CAAC;IAEF,IAAIZ,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1BA,OAAO,CAACC,SAAS,GAAG,IAAI;IAExB,IAAI,CAACM,WAAW,CAACM,IAAI,CAAC;MAClBH,IAAI,EAAE,UAAU;MAChBnB,IAAI,EAAEA,IAAI,CAACuB,OAAO,CAAC,IAAI,CAACf,QAAQ,CAAC;MACjCgB,IAAI,EAAE,IAAI,CAACjB,cAAc;MACzBE,OAAO,EAAEA;IACb,CAAC,CAAC;EACN;EAEAM,IAAI,GAAE;IACF,IAAG,IAAI,CAACC,WAAW,EAAC;MAChB,IAAI,CAACA,WAAW,CAACS,IAAI,EAAE;IAC3B;EACJ;EAEAC,GAAG,GAAG;IACF,IAAG,IAAI,CAACV,WAAW,EAAC;MAChB,OAAO,IAAI,CAACA,WAAW,CAACU,GAAG;IAC/B;EACJ;EAEAC,SAAS,GAAE;IACP,OAAO,CAAC,IAAI,CAACX,WAAW,CAACY,MAAM;EACnC;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGzB,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}