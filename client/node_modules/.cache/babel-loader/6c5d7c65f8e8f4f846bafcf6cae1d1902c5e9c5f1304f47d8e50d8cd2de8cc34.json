{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ritik\\\\OneDrive\\\\Desktop\\\\React\\\\my_timeline\\\\client\\\\src\\\\Components\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, Fragment } from 'react';\nimport './Calendar.css';\nimport SetGoalsOverlay from './SetGoalsOverlay';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { incrementYearAndMonth, decrementYearAndMonth, setCurrentSelectedDate } from '../Redux/uiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    dates,\n    today,\n    currMonth,\n    currYear,\n    currSelectedDate,\n    mouseOverDeadline\n  } = useSelector(state => state.uiSlice);\n  const {\n    userData,\n    userLoggedIn\n  } = useSelector(state => state.userSlice);\n  const date = new Date();\n  date.setMonth(currMonth);\n  const monthSpell = date.toLocaleString('en-US', {\n    month: 'long'\n  });\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  const [displayOverlay, setDisplayOverlay] = useState(false);\n  const handleOnClick = e => {\n    dispatch(setCurrentSelectedDate(e.target.value));\n    setDisplayOverlay(!displayOverlay);\n  };\n  const nextMonth = () => {\n    dispatch(incrementYearAndMonth());\n  };\n  const prevMonth = () => {\n    dispatch(decrementYearAndMonth({\n      userData,\n      userLoggedIn\n    }));\n  };\n  const checkIfGoalSet = date => {\n    if (userLoggedIn && Object.keys(userData.goals[currMonth]).length !== 0 && userData.goals[currMonth][currYear] && userData.goals[currMonth][currYear][date]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [!checkIfGoalSet(currSelectedDate) && userLoggedIn && displayOverlay && /*#__PURE__*/_jsxDEV(SetGoalsOverlay, {\n      setDisplayOverlay: setDisplayOverlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 88\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `Calendar-container ${mouseOverDeadline ? \"Calendar-container-2\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"Calendar-MonthYear\",\n        children: `${monthSpell}<br></br>${currYear}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevMonth,\n        className: \"prev-month\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          \"stroke-width\": \"1.2\",\n          stroke: \"currentColor\",\n          class: \"w-6 h-6\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            \"stroke-linecap\": \"round\",\n            \"stroke-linejoin\": \"round\",\n            d: \"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), days.map((day, index) => {\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: `${index % 7 === 0 ? \"#F06292\" : \"black\"}`\n          },\n          className: \"days\",\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 32\n        }, this);\n      }), dates.map((date, index) => {\n        if (date === 0) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"Calendar-button no-date\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 36\n          }, this);\n        } else {\n          if (checkIfGoalSet(date)) {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"Calendar-button\",\n              value: date,\n              onClick: handleOnClick,\n              style: {\n                borderColor: '#F9F54B',\n                borderRadius: \"50%\",\n                animation: \"example\",\n                animationDuration: \"5s\",\n                animationIterationCount: \"infinite\"\n              },\n              children: date\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 40\n            }, this);\n          } else if (date === today.today && currMonth === today.month && currYear === today.year) {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"Calendar-button\",\n              value: date,\n              onClick: handleOnClick,\n              style: {\n                color: \"#635985\",\n                border: 'none',\n                fontSize: '1.4rem',\n                fontFamily: 'fantasy'\n              },\n              children: date\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 40\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"Calendar-button\",\n              value: date,\n              onClick: handleOnClick,\n              style: {\n                backgroundColor: `${index % 7 === 0 ? \"#F06292\" : \"\"}`,\n                borderColor: `${index % 7 === 0 ? \"#F06292\" : \"\"}`,\n                color: `${index % 7 === 0 ? \"white\" : \"\"}`\n              },\n              children: date\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 40\n            }, this);\n          }\n        }\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextMonth,\n        className: \"next-month\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          \"stroke-width\": \"1.2\",\n          stroke: \"currentColor\",\n          class: \"w-6 h-6\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            \"stroke-linecap\": \"round\",\n            \"stroke-linejoin\": \"round\",\n            d: \"M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Calendar, \"nF9ivxB7H9gyQfVFxAk2oUL38yU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","Fragment","SetGoalsOverlay","useSelector","useDispatch","incrementYearAndMonth","decrementYearAndMonth","setCurrentSelectedDate","Calendar","dispatch","dates","today","currMonth","currYear","currSelectedDate","mouseOverDeadline","state","uiSlice","userData","userLoggedIn","userSlice","date","Date","setMonth","monthSpell","toLocaleString","month","days","displayOverlay","setDisplayOverlay","handleOnClick","e","target","value","nextMonth","prevMonth","checkIfGoalSet","Object","keys","goals","length","map","day","index","color","borderColor","borderRadius","animation","animationDuration","animationIterationCount","year","border","fontSize","fontFamily","backgroundColor"],"sources":["C:/Users/ritik/OneDrive/Desktop/React/my_timeline/client/src/Components/Calendar.js"],"sourcesContent":["import React, { useState, Fragment} from 'react'\r\nimport './Calendar.css'\r\nimport SetGoalsOverlay from './SetGoalsOverlay';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { incrementYearAndMonth, decrementYearAndMonth,setCurrentSelectedDate } from '../Redux/uiSlice';\r\n\r\n\r\n\r\n\r\nfunction Calendar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const {dates,today,currMonth,currYear,currSelectedDate,mouseOverDeadline} = useSelector((state)=> state.uiSlice)\r\n    const {userData,userLoggedIn} = useSelector((state)=> state.userSlice)\r\n\r\n\r\n    const date = new Date()\r\n    date.setMonth(currMonth);\r\n    const monthSpell = date.toLocaleString('en-US', { month: 'long' });\r\n\r\n\r\n    const days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    const [displayOverlay,setDisplayOverlay] = useState(false)\r\n\r\n    const handleOnClick = (e) => {\r\n        dispatch(setCurrentSelectedDate(e.target.value))\r\n        setDisplayOverlay(!displayOverlay)\r\n    }\r\n\r\n    const nextMonth = () => {\r\n        dispatch(incrementYearAndMonth())\r\n    }\r\n    const prevMonth = () => {\r\n        dispatch(decrementYearAndMonth({userData,userLoggedIn}))\r\n    }\r\n\r\n\r\n    const checkIfGoalSet = (date)=>{\r\n\r\n        if(\r\n            userLoggedIn && \r\n            Object.keys(userData.goals[currMonth]).length !== 0 && \r\n            userData.goals[currMonth][currYear] &&\r\n            userData.goals[currMonth][currYear][date]\r\n        )\r\n        {\r\n            return true\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n\r\n            {\r\n                !checkIfGoalSet(currSelectedDate) && userLoggedIn && displayOverlay && <SetGoalsOverlay setDisplayOverlay={setDisplayOverlay}/>\r\n            }\r\n\r\n            <div className={`Calendar-container ${mouseOverDeadline ? \"Calendar-container-2\" : \"\"}`}>\r\n\r\n                <h2 className='Calendar-MonthYear'>{`${monthSpell}<br></br>${currYear}`}</h2>\r\n\r\n                <button onClick={prevMonth} className='prev-month'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.2\" stroke=\"currentColor\" class=\"w-6 h-6\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\" />\r\n                    </svg>\r\n                </button>\r\n                {\r\n                    days.map((day,index)=>{\r\n                        return <h4 style={{color : `${index % 7 === 0 ? \"#F06292\" : \"black\"}`}} key={day} className=\"days\">{day}</h4>\r\n                    })\r\n                }\r\n                {  \r\n                    dates.map((date,index)=>{\r\n                        if(date === 0){\r\n                            return <button key={index} className='Calendar-button no-date'></button>\r\n                        }\r\n                        else{\r\n\r\n                            if(checkIfGoalSet(date)){\r\n                                return <button className='Calendar-button' key={index} value={date} onClick={handleOnClick} \r\n                                               style={{\r\n                                                        borderColor : '#F9F54B',\r\n                                                        borderRadius : \"50%\",\r\n                                                        animation : \"example\",\r\n                                                        animationDuration: \"5s\",\r\n                                                        animationIterationCount: \"infinite\",\r\n                                                    }}>{date}</button>\r\n                            }\r\n                            else if(date === today.today && currMonth === today.month && currYear === today.year){\r\n                                return <button className='Calendar-button' key={index} value={date} onClick={handleOnClick} \r\n                                               style={{\r\n                                                        color: \"#635985\",\r\n                                                        border: 'none',\r\n                                                        fontSize: '1.4rem',\r\n                                                        fontFamily: 'fantasy'\r\n                                                    }}>{date}</button>\r\n                            }\r\n                            else{\r\n                                return <button className='Calendar-button' key={index} value={date} onClick={handleOnClick} \r\n                                               style={{\r\n                                                        backgroundColor : `${index % 7 === 0 ? \"#F06292\" : \"\"}`,\r\n                                                        borderColor : `${index % 7 === 0 ? \"#F06292\" : \"\"}`,\r\n                                                        color : `${index % 7 === 0 ? \"white\" : \"\"}`,\r\n                                                    }}>{date}</button>\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                <button onClick={nextMonth} className='next-month'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.2\" stroke=\"currentColor\" class=\"w-6 h-6\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5\" />\r\n                    </svg>\r\n                </button>\r\n            </div>                \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Calendar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}